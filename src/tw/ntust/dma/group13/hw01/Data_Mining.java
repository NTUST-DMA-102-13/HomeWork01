/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tw.ntust.dma.group13.hw01;

import java.awt.BorderLayout;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.supercsv.io.CsvMapReader;
import org.supercsv.io.ICsvMapReader;
import org.supercsv.prefs.CsvPreference;

/**
 *
 * @author win7
 */
public class Data_Mining extends javax.swing.JFrame implements Runnable {

    Perceptron p;
    int typeOfNeuralNetwork;
    Dataset dataTrain;
    Dataset dataTest;
    JPanel[] panel_list;
    boolean iterasion;
    Thread data;
    boolean isExit = false;
    boolean isRun = false;

    /**
     * Creates new form Data_Mining
     */
    public Data_Mining() {
        initComponents();
        ImageIcon img = new ImageIcon("img\\dm.png");
        this.setIconImage(img.getImage());
        SpinnerModel sm = new SpinnerNumberModel(1, 1, 10000, 1);
//        SpinnerModel sm2 = new SpinnerNumberModel(1, 1, 10, 1);
        jSpinner_iteratiuon.setModel(sm);
        typeOfNeuralNetwork = Contraint.NeuralNetwork_Perceptron;
        jLabel_hiddenLayer.setEnabled(false);
        jSpinner_hiddenLayer.setEnabled(false);
//                jLab.setEnabled(false);
        jSpinner_iteratiuon.setEnabled(false);
        jRadioButton_TrainError.setSelected(true);
        iterasion = false;
        jTable_deltas.setEnabled(false);
        new Thread(this).start();
//        jSpinner_hiddenLayer.setModel(sm2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        buttonGroup_typeNeuralNetwork = new javax.swing.ButtonGroup();
        buttonGroup_stop = new javax.swing.ButtonGroup();
        choice = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField_LearningRate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jSpinner_iteratiuon = new javax.swing.JSpinner();
        jLabel_hiddenLayer = new javax.swing.JLabel();
        jSpinner_hiddenLayer = new javax.swing.JSpinner();
        jPanel_hidden = new javax.swing.JPanel();
        jRadioButton_TrainError = new javax.swing.JRadioButton();
        jRadioButton_iteration = new javax.swing.JRadioButton();
        jLabel_threshold = new javax.swing.JLabel();
        jTextField_threshold = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_weight = new javax.swing.JTable();
        jPanel_Deltas = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_deltas = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_dataSet = new javax.swing.JTable();
        jPanel_chart = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_inTrainSet = new javax.swing.JMenuItem();
        jMenuItem_inTestSet = new javax.swing.JMenuItem();
        jMenuItem_quit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu_typeNeuralNetwork = new javax.swing.JMenu();
        jRadioButtonMenuItem_propagation = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_bpn = new javax.swing.JRadioButtonMenuItem();
        jMenu_processingFunction = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem4 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem5 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem6 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem9 = new javax.swing.JRadioButtonMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jRadioButtonMenuItem7 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem8 = new javax.swing.JRadioButtonMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jRadioButtonMenuItem10 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem11 = new javax.swing.JRadioButtonMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem_runTrain = new javax.swing.JMenuItem();
        jMenuItem_runTest = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jMenu_processingFunction.show(false);

        jLabel1.setText("Learning Rate");

        jTextField_LearningRate.setText("jTextField1");

        jLabel3.setText("Number Iteration");

        jLabel_hiddenLayer.setText("Number Hidden Node");

        jSpinner_hiddenLayer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_hiddenLayerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel_hiddenLayout = new javax.swing.GroupLayout(jPanel_hidden);
        jPanel_hidden.setLayout(jPanel_hiddenLayout);
        jPanel_hiddenLayout.setHorizontalGroup(
            jPanel_hiddenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );
        jPanel_hiddenLayout.setVerticalGroup(
            jPanel_hiddenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );

        buttonGroup_stop.add(jRadioButton_TrainError);
        jRadioButton_TrainError.setText("Training Error");
        jRadioButton_TrainError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_TrainErrorActionPerformed(evt);
            }
        });

        buttonGroup_stop.add(jRadioButton_iteration);
        jRadioButton_iteration.setText("Iteration");
        jRadioButton_iteration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_iterationActionPerformed(evt);
            }
        });

        jLabel_threshold.setText("Threshold");

        jTextField_threshold.setText("jTextField1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_hidden, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_hiddenLayer)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel_threshold))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jRadioButton_TrainError)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton_iteration))
                            .addComponent(jTextField_LearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner_iteratiuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner_hiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_threshold, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_LearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_TrainError)
                    .addComponent(jRadioButton_iteration))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner_iteratiuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_hiddenLayer)
                    .addComponent(jSpinner_hiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_threshold)
                    .addComponent(jTextField_threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel_hidden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Initial Variable", jPanel2);

        jTable_weight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_weight);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Weights ", jPanel3);

        jTable_deltas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable_deltas);

        javax.swing.GroupLayout jPanel_DeltasLayout = new javax.swing.GroupLayout(jPanel_Deltas);
        jPanel_Deltas.setLayout(jPanel_DeltasLayout);
        jPanel_DeltasLayout.setHorizontalGroup(
            jPanel_DeltasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );
        jPanel_DeltasLayout.setVerticalGroup(
            jPanel_DeltasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Deltas", jPanel_Deltas);

        jTable_dataSet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable_dataSet);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Data Set", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel_chartLayout = new javax.swing.GroupLayout(jPanel_chart);
        jPanel_chart.setLayout(jPanel_chartLayout);
        jPanel_chartLayout.setHorizontalGroup(
            jPanel_chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel_chartLayout.setVerticalGroup(
            jPanel_chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_chartLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 243, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Chart", jPanel_chart);

        jMenu1.setText("File");

        jMenuItem_inTrainSet.setText("Input Training Set");
        jMenuItem_inTrainSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_inTrainSetActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_inTrainSet);

        jMenuItem_inTestSet.setText("Input Testing Set");
        jMenuItem_inTestSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_inTestSetActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_inTestSet);

        jMenuItem_quit.setText("Quit");
        jMenuItem_quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_quitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_quit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu_typeNeuralNetwork.setText("Type Neural Network");

        buttonGroup_typeNeuralNetwork.add(jRadioButtonMenuItem_propagation);
        jRadioButtonMenuItem_propagation.setSelected(true);
        jRadioButtonMenuItem_propagation.setText("Propagation");
        jRadioButtonMenuItem_propagation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_propagationActionPerformed(evt);
            }
        });
        jMenu_typeNeuralNetwork.add(jRadioButtonMenuItem_propagation);

        buttonGroup_typeNeuralNetwork.add(jRadioButtonMenuItem_bpn);
        jRadioButtonMenuItem_bpn.setText("Back Propagation");
        jRadioButtonMenuItem_bpn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_bpnActionPerformed(evt);
            }
        });
        jMenu_typeNeuralNetwork.add(jRadioButtonMenuItem_bpn);

        jMenu2.add(jMenu_typeNeuralNetwork);

        jMenu_processingFunction.setText("Processing Function");

        jMenu6.setText("Summation");

        jRadioButtonMenuItem3.setSelected(true);
        jRadioButtonMenuItem3.setText("jRadioButtonMenuItem3");
        jMenu6.add(jRadioButtonMenuItem3);

        jRadioButtonMenuItem4.setSelected(true);
        jRadioButtonMenuItem4.setText("jRadioButtonMenuItem4");
        jMenu6.add(jRadioButtonMenuItem4);

        jRadioButtonMenuItem5.setSelected(true);
        jRadioButtonMenuItem5.setText("jRadioButtonMenuItem5");
        jMenu6.add(jRadioButtonMenuItem5);

        jRadioButtonMenuItem6.setSelected(true);
        jRadioButtonMenuItem6.setText("jRadioButtonMenuItem6");
        jMenu6.add(jRadioButtonMenuItem6);

        jRadioButtonMenuItem9.setSelected(true);
        jRadioButtonMenuItem9.setText("jRadioButtonMenuItem9");
        jMenu6.add(jRadioButtonMenuItem9);

        jMenu_processingFunction.add(jMenu6);

        jMenu7.setText("Activation");

        jRadioButtonMenuItem7.setSelected(true);
        jRadioButtonMenuItem7.setText("jRadioButtonMenuItem7");
        jMenu7.add(jRadioButtonMenuItem7);

        jRadioButtonMenuItem8.setSelected(true);
        jRadioButtonMenuItem8.setText("jRadioButtonMenuItem8");
        jMenu7.add(jRadioButtonMenuItem8);

        jMenu_processingFunction.add(jMenu7);

        jMenu8.setText("Transfer");

        jRadioButtonMenuItem10.setSelected(true);
        jRadioButtonMenuItem10.setText("jRadioButtonMenuItem10");
        jMenu8.add(jRadioButtonMenuItem10);

        jRadioButtonMenuItem11.setSelected(true);
        jRadioButtonMenuItem11.setText("jRadioButtonMenuItem11");
        jMenu8.add(jRadioButtonMenuItem11);

        jMenu_processingFunction.add(jMenu8);

        jMenu2.add(jMenu_processingFunction);

        jMenuBar1.add(jMenu2);

        jMenu9.setText("Run");

        jMenuItem_runTrain.setText("Run Training");
        jMenuItem_runTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_runTrainActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem_runTrain);

        jMenuItem_runTest.setText("Run Testing");
        jMenu9.add(jMenuItem_runTest);

        jMenuBar1.add(jMenu9);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner_hiddenLayerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_hiddenLayerStateChanged
        // TODO add your handling code here:
//        jPanel_hidden = new JPanel();
//        System.out.println("change " + jSpinner_hiddenLayer.getValue());
//        int value = (int) jSpinner_hiddenLayer.getValue();
//        panel_list = new jPanel_hiddenNode[value];
//        jPanel_hidden.removeAll();
//        GroupLayout layout = new GroupLayout(jPanel_hidden);
//        jPanel_hidden.setLayout(layout);
//        layout.setAutoCreateGaps(true);
//        layout.setAutoCreateContainerGaps(true);
//        GroupLayout.ParallelGroup pl = layout.createParallelGroup(GroupLayout.Alignment.TRAILING);
//        GroupLayout.SequentialGroup sq = layout.createSequentialGroup();
//
//        for (int i = 0; i < panel_list.length; i++) {
//            panel_list[i] = new jPanel_hiddenNode();
//            JLabel label = (JLabel) panel_list[i].getComponent(0);
//            label.setText(label.getText() + " - " + (i + 1));
//            pl.addComponent(panel_list[i]);
//            GroupLayout.ParallelGroup pl_Tmp = layout.createParallelGroup(GroupLayout.Alignment.TRAILING);
//            pl_Tmp.addComponent(panel_list[i]);
//            sq.addGroup(pl_Tmp);
//        }
//        layout.setHorizontalGroup(layout.createSequentialGroup()
//                .addGroup(pl));
//        layout.setVerticalGroup(sq);
//        jScrollPane5.repaint();
    }//GEN-LAST:event_jSpinner_hiddenLayerStateChanged

    private void jMenuItem_inTrainSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_inTrainSetActionPerformed
        // TODO add your handling code here:
        dataTrain = readFile();
    }//GEN-LAST:event_jMenuItem_inTrainSetActionPerformed

    Dataset readFile() {
        JFileChooser choice = new JFileChooser();
        int option = choice.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File file = choice.getSelectedFile();
            System.out.println("file = " + file.getPath());
            Dataset dataset = new Dataset();
            ICsvMapReader mapReader = null;
            try {
                mapReader = new CsvMapReader(new FileReader(file.getPath()), CsvPreference.EXCEL_NORTH_EUROPE_PREFERENCE);


                String[] header = mapReader.getHeader(true); // skip past the header (we're defining our own)
                dataset.setNameAttributes(header.clone());
                Hashtable<String, ArrayList<String>> dataValue = new Hashtable<String, ArrayList<String>>();

                for (String head : header) {
                    System.out.println("header = " + head);

                }
                dataset.setNumAttributes(header.length);
                // only map the first 3 columns - setting header elements to null means those columns are ignored
//                final String[] header = new String[]{"customerNo", "firstName", "lastName", null, null, null, null, null,
//                    null, null};

                // apply some constraints to ignored columns (just because we can)
//                final CellProcessor[] processors = new CellProcessor[]{new UniqueHashCode(), new NotNull(),
//                    new NotNull(), new NotNull(), new NotNull(), new Optional(), new Optional(), new NotNull(),
//                    new NotNull(), new LMinMax(0L, LMinMax.MAX_LONG)};

                Map<String, String> customerMap;
//                dataValue.
                int numberEntry = 0;
                ArrayList<String> categoricalAttribute = new ArrayList<>();
                ArrayList<String> numericalAttribute = new ArrayList<>();
//             
                ArrayList<Object[]> dataTable = new ArrayList<>();
                //  jTable_dataSet.
                while ((customerMap = mapReader.read(header)) != null) {
                    System.out.println(String.format("lineNo=%s, rowNo=%s, customerMap=%s", mapReader.getLineNumber(),
                            mapReader.getRowNumber(), customerMap));
                    //     dataTable.add(customerMap.);
                    //  Object datTable[] = new Object[customerMap.size()];
                    if (numberEntry == 0) {
                        int i = 0;
                        ArrayList<Object> dataVall = new ArrayList<>();
                        for (String headerTitle : header) {
                            String data = customerMap.get(headerTitle);
                            ArrayList<String> dataObject = new ArrayList<>();
                            dataObject.add(data);
                            dataVall.add(data);
                            dataValue.put(headerTitle, dataObject);
                            // dataset.getListValueAttribute()[i] = new HashMap<>();
                            Map map = new HashMap();
                            map.put(data, 1);
                            dataset.getListValueAttribute()[i] = map;
                            //   dataTable.add(dataObject.toArray());
                            i++;
                            // for divided header based on categorical or numerical 
                            try {
                                double valueData = Double.parseDouble(data);
                                numericalAttribute.add(headerTitle);
                            } catch (NumberFormatException ex) {
                                categoricalAttribute.add(headerTitle);
                            }
                        }
                        dataTable.add(dataVall.toArray());
                    } else {
                        int i = 0;
                        ArrayList<Object> dataVall = new ArrayList<>();
                        for (String headerTitle : header) {
                            String data = customerMap.get(headerTitle);
                            ArrayList<String> dataObject = dataValue.get(headerTitle);
                            dataObject.add(data);
                            dataVall.add(data);
                            dataValue.put(headerTitle, dataObject);
                            Map map = (Map) dataset.getListValueAttribute()[i];
                            //   dataTable.add(dataObject.toArray());
                            if (map.containsKey(data)) {
                                Integer val = (Integer) map.get(data);
                                val = val + 1;
                                map.remove(data);
                                map.put(data, val);
                            } else {
                                map.put(data, 1);
                            }
                            dataset.getListValueAttribute()[i] = map;
                            // for divided header based on categorical or numerical ,
//                            check again each whether each categorical is correct or not
                            // if in previous reading data, that attribute is numerical categori
                            // and  if in current reading data , that attribute is categorical 
                            // then it will be swap from numerical to categorical 
                            try {
                                double valueData = Double.parseDouble(data);
                            } catch (NumberFormatException ex) {
                                if (!categoricalAttribute.contains(headerTitle)
                                        && numericalAttribute.contains(headerTitle)) {
                                    categoricalAttribute.add(headerTitle);
                                    numericalAttribute.remove(headerTitle);
                                }
                            }
                            i++;
                        }
                        dataTable.add(dataVall.toArray());
                    }

                    numberEntry = mapReader.getRowNumber();

                }
                dataset.setCategoricalAttribute(categoricalAttribute);
                dataset.setNumericalAttribute(numericalAttribute);
                dataset.processCategoricalInput();
                dataset.setNumEntries(numberEntry - 1);
                System.out.println("dataset.getNumEntries() = " + dataset.getNumEntries());
                dataset.setDataReal(dataValue);
                dataset.setNumAttributes(header.length);
                Object[][] dataa = convertTo2ArrayObject(dataTable);
                System.out.println("dataa.length = " + dataa.length);
                TableModel table = new DefaultTableModel(dataa, header);
                jTable_dataSet.setModel(table);
                //   jTable_dataSet = new JTable(table);
                jTable_dataSet.repaint();

            } catch (IOException ex) {
                Logger.getLogger(Data_Mining.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (mapReader != null) {
                    try {
                        mapReader.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Data_Mining.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            return dataset;
        }
        return null;
    }

    Object[][] convertTo2ArrayObject(ArrayList<Object[]> data) {
        Object[][] objRet = new Object[data.size()][data.get(0).length];
        for (int i = 0; i < data.size(); i++) {
            objRet[i] = data.get(i);
        }
        return objRet;
    }

    private void jMenuItem_inTestSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_inTestSetActionPerformed
        // TODO add your handling code here:
        dataTest = readFile();
    }//GEN-LAST:event_jMenuItem_inTestSetActionPerformed

    private void jRadioButtonMenuItem_bpnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_bpnActionPerformed
        // TODO add your handling code here:
        typeOfNeuralNetwork = Contraint.NeuralNetwork_BPN;
//        jLabel_hiddenLayer.setEnabled(true);
        jLabel_hiddenLayer.setEnabled(true);
        jSpinner_hiddenLayer.setEnabled(true);
        jLabel_threshold.setEnabled(false);
        jTextField_threshold.setEnabled(false);
        jTable_deltas.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonMenuItem_bpnActionPerformed

    private void jRadioButtonMenuItem_propagationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_propagationActionPerformed
        // TODO add your handling code here:
        typeOfNeuralNetwork = Contraint.NeuralNetwork_Perceptron;
        jLabel_hiddenLayer.setEnabled(false);
        jSpinner_hiddenLayer.setEnabled(false);
        jLabel_threshold.setEnabled(true);
        jTextField_threshold.setEnabled(true);
        jTable_deltas.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonMenuItem_propagationActionPerformed

    private void jMenuItem_runTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_runTrainActionPerformed
        // TODO add your handling code here:
        double LearningRate;
        try {
            LearningRate = Double.parseDouble(jTextField_LearningRate.getText());

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Learn Rate Error Input");
            return;
        }
        System.out.println("LearningRate = " + LearningRate);
        int numberIteration = (int) jSpinner_iteratiuon.getValue();
        int numberHiddenLayer = (int) jSpinner_hiddenLayer.getValue();
        int numberHiddenNode = 0;
        System.out.println("numberIteration = " + numberIteration);
        System.out.println("numberHiddenLayer = " + numberHiddenLayer);
        System.out.println("numberHiddenNode = " + numberHiddenNode);
        if (typeOfNeuralNetwork == Contraint.NeuralNetwork_Perceptron) {
            isRun = true;
            if (!iterasion) {
                p = new Perceptron(dataTrain.getNumAttributes() - 1, LearningRate, LearningRate);

            } else {
                p = new Perceptron(dataTrain.getNumAttributes() - 1, LearningRate, LearningRate, (int) jSpinner_iteratiuon.getValue());

//                p.Train(dataTrain.getDataSet());

            }
            p.setTypeRun(MachineLearningInterface.TrainFunction);
            p.setSetInput(dataTrain.getDataSet());
            data = new Thread(p);
            data.start();

            System.out.println("isRun = " + isRun);
//            jPanel_chart.repaint();

        } else if (typeOfNeuralNetwork == Contraint.NeuralNetwork_BPN) {

            if (numberHiddenLayer != 0) {
                int[] numberHiddenNodes = new int[numberHiddenLayer];
                for (int i = 0; i < panel_list.length; i++) {
                    JSpinner spin = (JSpinner) panel_list[i].getComponents()[1];
                    numberHiddenNodes[i] = (int) spin.getValue();
                }
//                    MLP mlp = new MLP(dataTrain, dataTest, numberHiddenLayer+2, numberHiddenNodes, LearningRate, new HyperbolictangentFunction());
//                    mlp.sequential();
                System.out.println("Sukses");
            }

        }

    }//GEN-LAST:event_jMenuItem_runTrainActionPerformed

    private void jRadioButton_iterationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_iterationActionPerformed
        // TODO add your handling code here:
        jSpinner_iteratiuon.setEnabled(true);
        iterasion = true;
    }//GEN-LAST:event_jRadioButton_iterationActionPerformed

    private void jRadioButton_TrainErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_TrainErrorActionPerformed
        // TODO add your handling code here:
        jSpinner_iteratiuon.setEnabled(false);
        iterasion = false;
    }//GEN-LAST:event_jRadioButton_TrainErrorActionPerformed

    private void jMenuItem_quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_quitActionPerformed
        // TODO add your handling code here:
        isExit = true;
        this.dispose();
    }//GEN-LAST:event_jMenuItem_quitActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        isExit = true;
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Data_Mining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Data_Mining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Data_Mining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Data_Mining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Data_Mining().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_stop;
    private javax.swing.ButtonGroup buttonGroup_typeNeuralNetwork;
    private javax.swing.JFileChooser choice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel_hiddenLayer;
    private javax.swing.JLabel jLabel_threshold;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_inTestSet;
    private javax.swing.JMenuItem jMenuItem_inTrainSet;
    private javax.swing.JMenuItem jMenuItem_quit;
    private javax.swing.JMenuItem jMenuItem_runTest;
    private javax.swing.JMenuItem jMenuItem_runTrain;
    private javax.swing.JMenu jMenu_processingFunction;
    private javax.swing.JMenu jMenu_typeNeuralNetwork;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel_Deltas;
    private javax.swing.JPanel jPanel_chart;
    private javax.swing.JPanel jPanel_hidden;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem10;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem11;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem5;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem7;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem8;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem9;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_bpn;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_propagation;
    private javax.swing.JRadioButton jRadioButton_TrainError;
    private javax.swing.JRadioButton jRadioButton_iteration;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner_hiddenLayer;
    private javax.swing.JSpinner jSpinner_iteratiuon;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable_dataSet;
    private javax.swing.JTable jTable_deltas;
    private javax.swing.JTable jTable_weight;
    private javax.swing.JTextField jTextField_LearningRate;
    private javax.swing.JTextField jTextField_threshold;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (!isExit) {
            System.out.println("isRun = " + isRun);
            if (data != null && !data.isAlive() && isRun) {
                System.out.println("isRun = " + isRun);
                Object[] weight = new Object[p.weigths.length];
                for (int i = 0; i < weight.length; i++) {
                    weight[i] = p.weigths[i];
                }
                Object dataWe[][] = new Object[1][];
                dataWe[0] = weight;
                TableModel table = new DefaultTableModel(dataWe, dataTrain.getNameAttributes());
                jTable_weight.setModel(table);

                isRun = false;



            } else if (data != null && data.isAlive() && isRun) {
                XYSeries series = new XYSeries("XYGraph");
                int i = 1;
                for (Integer err : p.errors) {
                    series.add(i, err);
                    i++;
                }

                // Add the series to your data set
                XYSeriesCollection dataset = new XYSeriesCollection();
                dataset.addSeries(series);
                // Generate the graph
                JFreeChart chart = ChartFactory.createXYLineChart(
                        "XY Chart", // Title
                        "x-axis", // x-axis Label
                        "y-axis", // y-axis Label
                        dataset, // Dataset
                        PlotOrientation.VERTICAL, // Plot Orientation
                        true, // Show Legend
                        true, // Use tooltips
                        false // Configure chart to generate URLs?
                        );

                try {
                    ChartUtilities.saveChartAsJPEG(new File("chart.jpg"), chart, 500, 300);
                } catch (IOException e) {
                    System.err.println("Problem occurred creating chart.");
                }
//            jPanel1 = new JPanel();
                ChartPanel CP = new ChartPanel(chart, true);
                CP.setChart(chart);
                jPanel1.removeAll();
                jPanel1.setLayout(new java.awt.BorderLayout());
                jPanel1.add(CP, BorderLayout.CENTER);
                jPanel1.validate();
                jPanel1.repaint();
            }
        }
    }
}
